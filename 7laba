//15. Для каждого элемента А(i,j) найти наибольший отрицательный элемент в выделенной области. Результат представить в виде таблицы.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <windows.h>
#include <conio.h>

int func(int i, int j, int A[9][9], int* N, int* M) {
	int maxotr = 0, k = 0;
	int I = i;

	if (A[i][j] < 0)
		k = 0;
	else
		k = 1;
	maxotr = A[i][j];
	while (I != 0) {
		if ((maxotr < A[I - 1][j]) || (k == 1))
			if (A[I - 1][j] < 0) {
				maxotr = A[I - 1][j];
				k = 0;
			}
			else
				k = 1;
		(I)--;

	}
	while ((j != 0) && (i < *N - 1)) {
		if ((maxotr < A[i][j - 1]) || (k == 1))
			if (A[i][j - 1] < 0) {
				maxotr = A[i][j - 1];
				k = 0;
			}
		(j)--;
		if ((maxotr < A[i + 1][j]) || (k == 1))
			if (A[i + 1][j] < 0) {
				maxotr = A[i + 1][j];
				k = 0;
			}
		(i)++;
	}
	if (j != 0)
		if ((maxotr < A[i][j - 1]) && (A[i][j - 1] < 0))
			maxotr = A[i][j - 1];


	if (maxotr < 0)
		return maxotr;
	else
		return 0;
}

int main() {
	int r=0, N = 0, M = 0, b=1;
	int A[9][9];
	const int NotUsed = system("color B5");

	
	
	do {
		printf("Please, enter array sizes (no more than 9x9): \n");
		printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", 201, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187);
		printf("%c\t%c\t%c\t%c\t%c\n", 186, 78, 186, 77, 186);
		printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n%c\t", 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185, 186);
		N =_getch();
		printf("%c\t%c\t", N, 186);
		M =_getch();
		printf("%c\t%c\n", M, 186);
		printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", 200, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188);
		
	} while ((N <'1') || (M <'1') || (N > '9') || (M > '9'));
	N = N - 48;
	M = M - 48;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			scanf("%d", &A[i][j]);
		}
	}
	
    printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", 201,205,205,205,205,205,205,205,205,205, 205, 205, 205, 205, 205, 205, 203, 205, 205,205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 203, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 187);
	printf("%c\t%c\t%c\t%c\t%c\t%c\t%c     %c%c%c%c%c%c\t%c\n",186, 252, 186, 105, 186, 106, 186, 82,101,115,117,108,116,186); 
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", 204, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 185);
			printf("%c\t%d\t%c\t%d\t%c\t%d\t%c", 186, b, 186, i, 186, j, 186);
			r = func(i,j,A,&N, &M);
			if (r<0)
				printf("\t%d\t%c\n", r, 186);
			else
				printf("\t%c%c\t%c\n", 58, 40, 186);
			b++;
		}
	}
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n", 200, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 202, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 188);
}





//int func(int, int, int[9][9], int*, int*);
